{"version":3,"sources":["Layout/Header.js","Layout/NotFound.js","utils/api/index.js","Cards/NotEnoughCards.js","Decks/StudyDeck.js","Decks/EditDeck.js","Cards/CardList.js","Decks/ViewDeck.js","Cards/AddCard.js","Cards/EditCard.js","Decks/DeckHome.js","Home/CreateDeck.js","Home/ViewDecks.js","Layout/index.js","App.js","index.js"],"names":["Header","className","NotFound","API_BASE_URL","process","headers","Headers","stripCards","deck","cards","fetchJson","url","options","a","fetch","response","status","Error","statusText","json","name","listDecks","signal","createDeck","method","body","JSON","stringify","readDeck","deckId","updateDeck","updatedDeck","id","listCards","createCard","card","Number","readCard","cardId","updateCard","updatedCard","append","NotEnoughCards","to","length","StudyDeck","useState","setCards","setDeck","front","setFront","cardIndex","setCardIndex","history","useHistory","useEffect","getCardsAndDeck","aria-label","back","type","onClick","e","window","confirm","push","EditDeck","description","editDeck","setEditDeck","gettingDeck","getDeck","changeHandler","preventDefault","target","value","onChange","rows","CardList","deleteCardHandler","deleteCard","then","cardLayout","map","ViewDeck","decks","setDecks","deleteDeckHandler","style","marginTop","AddCard","newCard","setNewCard","EditCard","editCard","setEditCard","useParams","getCard","go","DeckHome","getCards","exact","path","CreateDeck","newDeck","setNewDeck","submitHandler","onSubmit","ViewDecks","deckLayout","Layout","deleteDeck","gettingDecks","console","log","getDecks","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4OAaeA,MAXf,WACE,OACE,wBAAQC,UAAU,oBAAlB,SACE,sBAAKA,UAAU,uBAAf,UACE,oBAAIA,UAAU,YAAd,yBACA,mBAAGA,UAAU,OAAb,sDCGOC,MARf,WACE,OACE,qBAAKD,UAAU,WAAf,SACE,8C,eCDAE,EAAeC,mIAAYD,cAAgB,wBAK3CE,EAAU,IAAIC,QAapB,SAASC,EAAWC,GACqBA,EAA/BC,MACR,OAFwB,YACeD,EADf,W,SAkBXE,E,gFAAf,WAAyBC,EAAKC,GAA9B,eAAAC,EAAA,+EAE2BC,MAAMH,EAAKC,GAFtC,aAEUG,EAFV,QAGiBC,OAAS,KAAOD,EAASC,OAAS,KAHnD,sBAIY,IAAIC,MAAJ,UAAaF,EAASC,OAAtB,cAAkCD,EAASG,aAJvD,uBAMiBH,EAASI,OAN1B,6EAQuB,eAAf,KAAMC,KARd,uF,sBAmBO,SAAeC,EAAtB,kC,4CAAO,WAAyBC,GAAzB,eAAAT,EAAA,6DACCF,EADD,UACUR,EADV,gCAEQO,EAAUC,EAAK,CAAEW,WAFzB,oF,sBAeA,SAAeC,EAAtB,oC,4CAAO,WAA0Bf,EAAMc,GAAhC,iBAAAT,EAAA,6DACCF,EADD,UACUR,EADV,UAECS,EAAU,CACdY,OAAQ,OACRnB,UACAoB,KAAMC,KAAKC,UAAUpB,EAAWC,IAChCc,UANG,SAQQZ,EAAUC,EAAKC,GARvB,oF,sBAoBA,SAAegB,EAAtB,oC,4CAAO,WAAwBC,EAAQP,GAAhC,eAAAT,EAAA,6DACCF,EADD,UACUR,EADV,kBACgC0B,EADhC,0BAEQnB,EAAUC,EAAK,CAAEW,WAFzB,oF,sBAcA,SAAeQ,EAAtB,oC,4CAAO,WAA0BC,EAAaT,GAAvC,iBAAAT,EAAA,6DACCF,EADD,UACUR,EADV,kBACgC4B,EAAYC,GAD5C,iBAECpB,EAAU,CACdY,OAAQ,MACRnB,UACAoB,KAAMC,KAAKC,UAAUpB,EAAWwB,IAChCT,UANG,SAQQZ,EAAUC,EAAKC,GARvB,oF,kEAoBA,WAA0BiB,EAAQP,GAAlC,iBAAAT,EAAA,6DACCF,EADD,UACUR,EADV,kBACgC0B,GAC/BjB,EAAU,CAAEY,OAAQ,SAAUF,UAF/B,SAGQZ,EAAUC,EAAKC,GAHvB,oF,sBAeA,SAAeqB,EAAtB,oC,4CAAO,WAAyBJ,EAAQP,GAAjC,eAAAT,EAAA,6DACCF,EADD,UACUR,EADV,yBACuC0B,GADvC,SAEQnB,EAAUC,EAAK,CAAEW,WAFzB,oF,sBAiBA,SAAeY,EAAtB,sC,4CAAO,WAA0BL,EAAQM,EAAMb,GAAxC,iBAAAT,EAAA,6DAGCF,EAHD,UAGUR,EAHV,UAILgC,EAAKN,OAASO,OAAOP,GACfjB,EAAU,CACdY,OAAQ,OACRnB,UACAoB,KAAMC,KAAKC,UAAUQ,GACrBb,UATG,SAWQZ,EAAUC,EAAKC,GAXvB,oF,sBAuBA,SAAeyB,EAAtB,oC,4CAAO,WAAwBC,EAAQhB,GAAhC,eAAAT,EAAA,6DACCF,EADD,UACUR,EADV,kBACgCmC,GADhC,SAEQ5B,EAAUC,EAAK,CAAEW,WAFzB,oF,sBAcA,SAAeiB,EAAtB,oC,4CAAO,WAA0BC,EAAalB,GAAvC,iBAAAT,EAAA,6DACCF,EADD,UACUR,EADV,kBACgCqC,EAAYR,IAC3CpB,EAAU,CACdY,OAAQ,MACRnB,UACAoB,KAAMC,KAAKC,UAAUa,IALlB,SAOQ9B,EAAUC,EAAKC,GAPvB,oF,kEAmBA,WAA0B0B,EAAQhB,GAAlC,iBAAAT,EAAA,6DACCF,EADD,UACUR,EADV,kBACgCmC,GAC/B1B,EAAU,CAAEY,OAAQ,SAAUF,UAF/B,SAGQZ,EAAUC,EAAKC,GAHvB,oF,sBA9MPP,EAAQoC,OAAO,eAAgB,oBCqBhBC,MA5Bf,YAAkD,IAAxBlC,EAAuB,EAAvBA,KAAMqB,EAAiB,EAAjBA,OAAQpB,EAAS,EAATA,MACtC,OACE,sBAAKR,UAAU,YAAf,UACE,qBAAKA,UAAU,aAAf,SACE,qBAAIA,UAAU,aAAd,UACE,oBAAIA,UAAU,kBAAd,SACE,cAAC,IAAD,CAAM0C,GAAG,IAAT,mBADkC,KAGpC,oBAAI1C,UAAU,kBAAd,SACE,cAAC,IAAD,CAAM0C,GAAE,iBAAYd,GAApB,SAA+BrB,EAAKY,QADF,KAGpC,oBAAInB,UAAU,yBAAd,kBAA2C,UAG/C,gCACE,0CAAaO,EAAKY,QAClB,gGACkE,IAC/DX,EAAMmC,OAFT,sBAKF,iCACE,cAAC,IAAD,CAAMD,GAAE,iBAAYnC,EAAKwB,GAAjB,cAAR,6BC4DOa,MAhFf,YAAgC,IAAXhB,EAAU,EAAVA,OAAU,EACHiB,qBADG,mBACtBrC,EADsB,KACfsC,EADe,OAELD,qBAFK,mBAEtBtC,EAFsB,KAEhBwC,EAFgB,OAGHF,oBAAS,GAHN,mBAGtBG,EAHsB,KAGfC,EAHe,OAIKJ,mBAAS,GAJd,mBAItBK,EAJsB,KAIXC,EAJW,KAKvBC,EAAUC,cAqChB,OAlCAC,qBAAU,WAAM,4CACd,4BAAA1C,EAAA,sEACyBe,EAASC,GADlC,OACQd,EADR,OAEEiC,EAAQjC,GACRgC,EAAShC,EAASN,OAHpB,4CADc,uBAAC,WAAD,wBAMd+C,KACC,CAAC3B,IA2BCpB,EAGDA,EAAMmC,OAAS,EACV,cAAC,EAAD,CAAgBpC,KAAMA,EAAMqB,OAAQA,EAAQpB,MAAOA,IAI1D,sBAAKR,UAAU,YAAf,UACE,qBAAKwD,aAAW,aAAhB,SACE,qBAAIxD,UAAU,aAAd,UACE,oBAAIA,UAAU,kBAAd,SACE,cAAC,IAAD,CAAMA,UAAU,UAAU0C,GAAG,IAA7B,oBAEF,oBAAI1C,UAAU,kBAAd,SACE,cAAC,IAAD,CAAMA,UAAU,UAAS0C,GAAE,iBAAYd,GAAvC,SAAkDrB,EAAKY,SAEzD,oBAAInB,UAAU,yBAAd,wBAIJ,qBAAKA,UAAU,YAAf,SACE,qBAAIA,UAAU,oBAAd,kBACQkD,EAAY,EADpB,OAC2B1C,EAAMmC,YAGnC,8BACE,mBAAG3C,UAAU,wBAAb,SAAsCgD,EAAQxC,EAAM0C,GAAWF,MAAQxC,EAAM0C,GAAWO,SAE1F,wBAAQzD,UAAU,mCAAmC0D,KAAK,OAAOC,QArDjD,SAACC,GACnBX,GAAUD,IAoDR,kBAGA,wBAAQhD,UAAU,mCAAmC2D,QAnDrC,SAACC,GACfV,EAAY,EAAI1C,EAAMmC,QACxBQ,EAAaD,EAAY,GACzBD,GAAS,IAGMY,OAAOC,QACpB,+DAGAb,GAAS,GACTE,EAAa,IAEbC,EAAQW,KAAK,MAsCf,qBA/BK,4C,eCqDIC,EAjGE,SAAC,GAAsB,IAApBzD,EAAmB,EAAnBA,KAAMqB,EAAa,EAAbA,OAElBwB,EAAUC,cAFqB,EAULR,mBALP,CACvBd,GAAI,IACJZ,KAAM,IACN8C,YAAa,MARsB,mBAU9BC,EAV8B,KAUpBC,EAVoB,KAarCb,qBAAU,WAAM,4CACd,4BAAA1C,EAAA,sEAC4Be,EAASC,GADrC,OACQwC,EADR,OAEED,EAAYC,GAFd,4CADc,uBAAC,WAAD,wBAKdC,KACC,CAACzC,IAGJ,IAAM0C,EAAgB,SAACV,GACrBA,EAAEW,iBACFJ,EAAY,2BAAKD,GAAN,kBAAiBN,EAAEY,OAAOrD,KAAOyC,EAAEY,OAAOC,UAxBlB,4CA4BrC,WAA6Bb,GAA7B,SAAAhD,EAAA,6DACEgD,EAAEW,iBADJ,SAEQ1C,EAAWqC,GAFnB,OAGEd,EAAQW,KAAK,KAHf,4CA5BqC,sBAuCrC,OAAKxD,EAIH,sBAAKP,UAAU,YAAf,UACE,qBAAIA,UAAU,aAAd,UACE,oBAAIA,UAAU,kBAAd,SACE,cAAC,IAAD,CAAMA,UAAU,UAAU0C,GAAG,IAA7B,oBAEF,oBAAI1C,UAAU,kBAAd,SACE,cAAC,IAAD,CAAMA,UAAU,UAAU0C,GAAE,iBAAYd,GAAxC,SAAmDsC,EAAS/C,SAE9D,oBAAInB,UAAU,yBAAd,0BAEF,gCACE,qBAAKA,UAAU,MAAf,SACF,iCACE,uBAAOA,UAAU,6BAAjB,uBACA,uBACE0D,KAAK,WACL3B,GAAG,OACHZ,KAAK,OACLuD,SAAUJ,EACVG,MAAOP,EAAS/C,KAChBnB,UAAU,0BAGZ,uBAAOA,UAAU,6BAAjB,yBACA,0BACE2E,KAAK,IACL5C,GAAG,cACHZ,KAAK,cACLuD,SAAUJ,EACVG,MAAOP,EAASD,YAChBjE,UAAU,+BAKZ,wBACEA,UAAU,mCACV0D,KAAK,SACLC,QAjF6B,4CA8E/B,oBAOA,wBACE3D,UAAU,mCACV0D,KAAK,SACLC,QArDc,SAACC,GACrBR,EAAQW,KAAK,MAiDT,0BA7CG,yCCmBIa,MAxDf,YAAmC,IAAfrE,EAAc,EAAdA,KAAMC,EAAQ,EAARA,MAEpB4C,EAAUC,cAGhB,SAASwB,EAAmBxC,GACrBwB,OAAOC,QAAQ,6EJ2Mf,SAAP,oCI1MMgB,CAAWzC,GAAQ0C,MAAK,kBAAM3B,EAAQW,KAAK,QAMjD,IAAMiB,EAAaxE,EAAMyE,KAAI,SAAC/C,GAC1B,OACI,sBAAKlC,UAAU,OAAf,UACI,qBAAKA,UAAU,YAAf,SACI,sBAAKA,UAAU,MAAf,UACA,sBAAKA,UAAU,sBAAf,UACA,uCACA,8BACI,4BAAIkC,EAAKc,aAGb,sBAAKhD,UAAU,sBAAf,UACA,sCACA,8BACI,4BAAIkC,EAAKuB,iBAKb,cAAC,IAAD,CAAMf,GAAE,iBAAYnC,EAAKwB,GAAjB,kBAA6BG,EAAKH,GAAlC,SAA6C/B,UAAU,oBAA/D,uBAQJ,wBAAQA,UAAU,wBAAwB0D,KAAK,SAASC,QAAU,kBAAMkB,EAAkB3C,EAAKH,KAA/F,2BAzBuBG,EAAKH,OAiCpC,OACJ,8BACKiD,KCbYE,EAvCA,SAAC,GAAwD,IAAtD3E,EAAqD,EAArDA,KAAM4E,EAA+C,EAA/CA,MAAOC,EAAwC,EAAxCA,SAAiBC,GAAuB,EAA9B7E,MAA8B,EAAvB6E,mBAI9C,OAAK9E,EAEH,sBAAKP,UAAU,YAAYsF,MAAO,CAACC,UAAU,QAA7C,UACE,8BACE,qBAAIvF,UAAU,aAAd,UACE,oBAAIA,UAAU,kBAAd,SACE,cAAC,IAAD,CAAM0C,GAAG,IAAI1C,UAAU,kBAAvB,mBADkC,KAGpC,oBAAIA,UAAU,yBAAd,SAAgDO,EAAKY,MAAV,UAG/C,sBAAKnB,UAAU,YAAf,UACE,oBAAIA,UAAU,YAAd,SAA2BO,EAAKY,OAChC,oBAAInB,UAAU,mBAAd,SAAkCO,EAAK0D,cACvC,cAAC,IAAD,CAAMjE,UAAU,mBAAmB0C,GAAE,iBAAYnC,EAAKwB,GAAjB,SAArC,kBACA,cAAC,IAAD,CAAM/B,UAAU,mBAAmB0C,GAAE,iBAAYnC,EAAKwB,GAAjB,UAArC,mBACA,cAAC,IAAD,CAAM/B,UAAU,mBAAmB0C,GAAE,iBAAYnC,EAAKwB,GAAjB,cAArC,uBACA,wBAAQ/B,UAAU,kBAAkB2D,QAAS,kBAAM0B,EAAkB9E,EAAKwB,KAA1E,4BAEF,uBACA,gCACE,qBAAI/B,UAAU,mBAAd,cAAmCO,EAAKC,MAAMmC,OAA9C,YACA,cAAC,EAAD,CACEpC,KAAMA,EACN4E,MAAOA,EACPC,SAAUA,EACVxD,OAAQrB,EAAKwB,GACbvB,MAAOD,EAAKC,cA3BF,MCiFPgF,EAtFC,SAAC,GAA+B,IAA7BjF,EAA4B,EAA5BA,KAAMwC,EAAsB,EAAtBA,QAASnB,EAAa,EAAbA,OAE1BwB,EAAUC,cAF6B,EAGfR,mBAAS,CACrCG,MAAO,IACPS,KAAM,IACN7B,WAN2C,mBAGtC6D,EAHsC,KAG7BC,EAH6B,iDAmB7C,WAAiC9B,GAAjC,SAAAhD,EAAA,6DACEgD,EAAEW,iBADJ,SAEQtC,EAAWL,EAAQ6D,GAF3B,OAGErC,EAAQW,KAAK,KACbhB,EAAQxC,GAJV,4CAnB6C,sBAkC7C,OAAKA,EAIH,sBAAKP,UAAU,YAAf,UACE,qBAAKwD,aAAW,aAAhB,SACE,qBAAIxD,UAAU,aAAd,UACE,oBAAIA,UAAU,kBAAd,SACE,cAAC,IAAD,CAAMA,UAAU,UAAU0C,GAAG,IAA7B,oBAEF,oBAAI1C,UAAU,kBAAd,SACE,cAAC,IAAD,CAAMA,UAAU,UAAU0C,GAAE,iBAAYd,GAAxC,SAAmDrB,EAAKY,SAE1D,oBAAInB,UAAU,yBAAd,2BAKJ,gCACE,qBAAKA,UAAU,MAAf,SACF,iCACE,uBAAOA,UAAU,6BAAjB,mBACA,0BACE0D,KAAK,OACL3B,GAAG,QACHZ,KAAK,QACLuD,SAnDuB,SAACd,GAC9BA,EAAEW,iBACFmB,EAAW,2BAAKD,GAAN,IAAezC,MAAOY,EAAEY,OAAOC,UAkDnCA,MAAOgB,EAAQzC,MACfhD,UAAU,0BAEZ,uBAAOA,UAAU,6BAAjB,kBACA,0BACE0D,KAAK,OACL3B,GAAG,OACHZ,KAAK,OACLuD,SAvDsB,SAACd,GAC7BA,EAAEW,iBACFmB,EAAW,2BAAKD,GAAN,IAAehC,KAAMG,EAAEY,OAAOC,UAsDlCA,MAAOgB,EAAQhC,KACfzD,UAAU,+BAIZ,wBAAQA,UAAU,mCAAmC0D,KAAK,SAASC,QA3E5B,4CA2EvC,oBAGA,wBAAQ3D,UAAU,mCAAmC0D,KAAK,QAAQC,QAhD9C,WACxBP,EAAQW,KAAR,iBAAuBnC,KA+CnB,0BA3CG,4CC8DI+D,EAjGE,SAAC,GAAsB,IAApBpF,EAAmB,EAAnBA,KAAMqB,EAAa,EAAbA,OAAa,EAMLiB,mBAJP,CACvBG,MAAO,IACPS,KAAM,MAJ6B,mBAM9BmC,EAN8B,KAMpBC,EANoB,KAO7BxD,EAAWyD,cAAXzD,OACFe,EAAUC,cAGhBC,qBAAU,WAAM,4CACd,4BAAA1C,EAAA,sEACyBwB,EAASC,GADlC,OACQvB,EADR,OAEE+E,EAAY/E,GAFd,4CADc,uBAAC,WAAD,wBAKdiF,KACC,CAAC1D,IAjBiC,4CAoCrC,WAAiCuB,GAAjC,SAAAhD,EAAA,6DACEgD,EAAEW,iBADJ,SAEQjC,EAAWsD,GAFnB,OAGExC,EAAQ4C,GAAG,KAHb,4CApCqC,sBA0CrC,OAAKzF,EAIH,sBAAKP,UAAU,YAAf,UACE,qBAAKwD,aAAW,aAAhB,SACE,qBAAIxD,UAAU,aAAd,UACE,oBAAIA,UAAU,kBAAd,SACE,cAAC,IAAD,CAAMA,UAAU,UAAU0C,GAAG,IAA7B,oBAEF,oBAAI1C,UAAU,kBAAd,SACE,cAAC,IAAD,CAAMA,UAAU,UAAU0C,GAAE,iBAAYd,GAAxC,SAAmDrB,EAAKY,SAE1D,oBAAInB,UAAU,yBAAd,4BAGJ,gCACA,qBAAKA,UAAU,MAAf,SACA,iCACE,uBAAOA,UAAU,6BAAjB,mBACA,0BACE2E,KAAK,IACL5C,GAAG,QACHZ,KAAK,QACLuD,SA9CuB,SAACd,GAC9BA,EAAEW,iBACFsB,EAAY,2BAAKD,GAAN,IAAgB5C,MAAOY,EAAEY,OAAOC,UA6CrCA,MAAOmB,EAAS5C,MAChBhD,UAAU,0BAIZ,uBAAOA,UAAU,6BAAjB,kBACA,0BACE2E,KAAK,IACL5C,GAAG,OACHZ,KAAK,OACLuD,SArDsB,SAACd,GAC7BA,EAAEW,iBACFsB,EAAY,2BAAKD,GAAN,IAAgBnC,KAAMG,EAAEY,OAAOC,UAoDpCA,MAAOmB,EAASnC,KAChBzD,UAAU,+BAKZ,wBAAQA,UAAU,mCAAmC0D,KAAK,SAASC,QApFpC,4CAoF/B,oBAGA,wBAAQ3D,UAAU,mCAAmC0D,KAAK,SAASC,QAzDzE,SAAuBC,GACrBA,EAAEW,iBACFnB,EAAQW,KAAK,MAuDT,0BA5CG,4CCyBIkC,EA9DE,SAAC,GAA4C,IAA1Cd,EAAyC,EAAzCA,MAAOC,EAAkC,EAAlCA,SAAUC,EAAwB,EAAxBA,kBAC3BzD,EAAWkE,cAAXlE,OADmD,EAEjCiB,mBAAS,IAFwB,mBAEpDrC,EAFoD,KAE7CsC,EAF6C,OAGnCD,qBAHmC,mBAGpDtC,EAHoD,KAG9CwC,EAH8C,KAyB3D,OAnBAO,qBAAU,WAAM,4CAEd,4BAAA1C,EAAA,sEAC4Be,EAASC,GADrC,OACQwC,EADR,OAEErB,EAAQqB,GAFV,4CAFc,uBAAC,WAAD,wBAMdC,KACC,CAACzC,IAIJ0B,qBAAU,WAAM,4CACd,4BAAA1C,EAAA,sEAC4BoB,EAAUJ,GADtC,OACQwC,EADR,OAEEtB,EAASsB,GAFX,4CADc,uBAAC,WAAD,wBAKd8B,KACC,CAACtE,IAGF,8BACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOuE,OAAK,EAACC,KAAK,iBAAlB,SACE,cAAC,EAAD,CAAgB7F,OAAM4E,QAAOC,WAAU5E,QAAO6E,wBAEhD,cAAC,IAAD,CAAOe,KAAK,uBAAZ,SACE,cAAC,EAAD,CACExE,OAAQA,EACRrB,KAAMA,EACN8E,kBAAmBA,EACnB7E,MAAOA,EACPsC,SAAUA,MAGd,cAAC,IAAD,CAAOsD,KAAK,sBAAZ,SACE,cAAC,EAAD,CACExE,OAAQA,EACRrB,KAAMA,EACN6E,SAAUA,EACVD,MAAOA,MAGX,cAAC,IAAD,CAAOiB,KAAK,oCAAZ,SACE,cAAC,EAAD,CAAgB7F,OAAMC,QAAOsC,WAAUlB,aAEzC,cAAC,IAAD,CAAOwE,KAAK,2BAAZ,SACE,cAAC,EAAD,CAAe7F,OAAMC,QAAOsC,WAAUlB,SAAQmB,cAEhD,cAAC,IAAD,UACE,uDCKKsD,EAlEI,WAAO,IAAD,EACOxD,mBAAS,CACrC1B,KAAM,GACN8C,YAAa,KAHQ,mBAChBqC,EADgB,KACPC,EADO,KAKjBnD,EAAUC,cAEViB,EAAgB,SAACV,GACrBA,EAAEW,iBACFgC,EAAW,2BAAKD,GAAN,kBAAgB1C,EAAEY,OAAOrD,KAAOyC,EAAEY,OAAOC,UAT9B,SAYR+B,EAZQ,8EAYvB,WAA6B5C,GAA7B,eAAAhD,EAAA,sEACyBU,EAAWgF,GADpC,cACQxF,EADR,OAEEsC,EAAQW,KAAK,KAFf,kBAGSjD,GAHT,4CAZuB,sBAsBvB,OACE,sBAAKd,UAAU,YAAf,UACE,qBAAIA,UAAU,aAAd,UACE,oBAAIA,UAAU,kBAAd,SACE,cAAC,IAAD,CAAMA,UAAU,UAAU0C,GAAG,IAA7B,oBAEF,oBAAI1C,UAAU,yBAAd,4BAEF,gCACE,qBAAKA,UAAU,MAAf,SACF,uBAAMyG,SAAUD,EAAhB,UACE,uBAAOxG,UAAU,6BAAjB,uBACA,uBACE0D,KAAK,OACL3B,GAAG,OACHZ,KAAK,OACLuD,SAAUJ,EACVG,MAAO6B,EAAQnF,KACfnB,UAAU,0BAGZ,uBAAOA,UAAU,6BAAjB,yBACA,0BACE+B,GAAG,cACHZ,KAAK,cACLuD,SAAUJ,EACVG,MAAO6B,EAAQrC,YACfjE,UAAU,+BAKZ,wBAAQA,UAAU,+BAA+B0D,KAAK,SAAS+C,SAAUD,EAAzE,oBAGA,wBAAQxG,UAAU,+BAA+B0D,KAAK,SAASC,QAvC/C,SAACC,GACrBR,EAAQW,KAAK,MAsCT,2BChBO2C,MA1Cf,YAAkD,IAA7BvB,EAA4B,EAA5BA,MAAOE,EAAqB,EAArBA,kBAIpBsB,EAAaxB,EAAMF,KAAI,SAAC1E,GAC5B,OACE,qBAAKP,UAAU,iBAAf,SACE,gCACE,6BAAKO,EAAKY,OAEV,8BACE,4BAAIZ,EAAK0D,gBAEX,gCAAM1D,EAAKC,MAAMmC,OAAjB,YACA,cAAC,IAAD,CAAM3C,UAAU,mBAAmB0C,GAAE,iBAAYnC,EAAKwB,GAAjB,KAArC,kBAGA,cAAC,IAAD,CAAM/B,UAAU,mBAAmB0C,GAAE,iBAAYnC,EAAKwB,GAAjB,UAArC,mBAGA,wBACE/B,UAAU,kBAEV2D,QAAS,kBAAM0B,EAAkB9E,EAAKwB,KAHxC,wBAdiCxB,EAAKwB,OA0B9C,OACE,sBAAK/B,UAAU,YAAf,UACE,oBAAIA,UAAU,uBAAd,8BACA,qBAAKA,UAAU,gBAAf,SAAgC2G,IAChC,cAAC,IAAD,CAAM3G,UAAU,cAAc0C,GAAI,aAAlC,6B,MC8BSkE,MA1Df,WAAkB,MAEU/D,mBAAS,IAFnB,mBAETsC,EAFS,KAEFC,EAFE,KAGVhC,EAAUC,cAchB,SAASgC,EAAkBzD,GAEvBiC,OAAOC,QACL,+EXiGD,SAAP,6BW9FM+C,CAAWjF,GACXwB,EAAQW,KAAK,MAGjB,OArBAT,qBAAU,WAAM,4CACd,4BAAA1C,EAAA,sEAC6BQ,IAD7B,OACQ0F,EADR,OAEEC,QAAQC,IAAI,eAAgBF,GAC5B1B,EAAS0B,GAHX,4CADc,uBAAC,WAAD,wBAMdG,KACC,CAAC7B,IACN2B,QAAQC,IAAI,QAAS7B,GAcjB,sBAAKnF,UAAU,mBAAf,UACE,cAAC,EAAD,IACA,qBAAKA,UAAU,YAAf,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOmG,OAAK,EAACC,KAAK,IAAlB,SACE,cAAC,EAAD,CACEjB,MAAOA,EACPC,SAAUA,EACVC,kBAAmBA,MAGvB,cAAC,IAAD,CAAOe,KAAK,aAAZ,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOA,KAAK,iBAAZ,SACE,cAAC,EAAD,CACEjB,MAAOA,EACPC,SAAUA,EACVC,kBAAmBA,MAGvB,cAAC,IAAD,UACE,cAAC,EAAD,eCzCG6B,MAZf,WACE,OACE,qBAAKlH,UAAU,aAAf,SACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAOoG,KAAK,IAAZ,SACE,cAAC,EAAD,WCRVe,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACE,cAAC,EAAD,QAGJC,SAASC,eAAe,W","file":"static/js/main.2da360d3.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Header() {\n  return (\n    <header className=\"jumbotron bg-dark\">\n      <div className=\"container text-white\">\n        <h1 className=\"display-4\">Flash This!</h1>\n        <p className=\"lead\">Discover The Flashcard Difference.</p>\n      </div>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\n\nfunction NotFound() {\n  return (\n    <div className=\"NotFound\">\n      <h1>Not Found</h1>\n    </div>\n  );\n}\n\nexport default NotFound;\n","/**\n * Defines the base URL for the API.\n * The default values is overridden by the `API_BASE_URL` environment variable.\n */\nconst API_BASE_URL = process.env.API_BASE_URL || \"http://localhost:5000\";\n\n/**\n * Defines the default headers for these functions to work with `json-server`\n */\nconst headers = new Headers();\nheaders.append(\"Content-Type\", \"application/json\");\n\n/**\n * Removes the `cards` property from the deck so it is not accidentally saved with the deck.\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param deck\n *  the deck instance\n * @returns {*}\n *  a copy of the deck instance with the `cards` property removed.\n */\nfunction stripCards(deck) {\n  const { cards, ...deckWithoutCards } = deck;\n  return deckWithoutCards;\n}\n\n/**\n * Fetch `json` from the specified URL and handle error status codes and ignore `AbortError`s\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param url\n *  the url for the requst.\n * @param options\n *  any options for fetch\n * @returns {Promise<Error|any>}\n *  a promise that resolves to the `json` data or an error.\n *  If the response is not in the 200 - 399 range the promise is rejected.\n */\nasync function fetchJson(url, options) {\n  try {\n    const response = await fetch(url, options);\n    if (response.status < 200 || response.status > 399) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n    return await response.json();\n  } catch (error) {\n    if (error.name !== \"AbortError\") {\n      throw error;\n    }\n  }\n}\n\n/**\n * Retrieves all existing decks.\n * @returns {Promise<[deck]>}\n *  a promise that resolves to a possibly empty array of decks saved in the database.\n */\nexport async function listDecks(signal) {\n  const url = `${API_BASE_URL}/decks?_embed=cards`;\n  return await fetchJson(url, { signal });\n}\n\n/**\n * Saves deck to the database (public/data/db.json).\n * There is no validation done on the deck object, any object will be saved.\n * @param deck\n *  the deck to save, which must not have an `id` property\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<deck>}\n *  a promise that resolves the saved deck, which will now have an `id` property.\n */\nexport async function createDeck(deck, signal) {\n  const url = `${API_BASE_URL}/decks`;\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(stripCards(deck)),\n    signal,\n  };\n  return await fetchJson(url, options);\n}\n\n/**\n * Retrieves the deck with the specified `deckId`\n * @param deckId\n *  the `id` property matching the desired deck.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<any>}\n *  a promise that resolves to the saved deck.\n */\nexport async function readDeck(deckId, signal) {\n  const url = `${API_BASE_URL}/decks/${deckId}?_embed=cards`;\n  return await fetchJson(url, { signal });\n}\n\n/**\n * Updates an existing deck\n * @param updatedDeck\n *  the deck to save, which must have an `id` property.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the updated deck.\n */\nexport async function updateDeck(updatedDeck, signal) {\n  const url = `${API_BASE_URL}/decks/${updatedDeck.id}?_embed=cards`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify(stripCards(updatedDeck)),\n    signal,\n  };\n  return await fetchJson(url, options);\n}\n\n/**\n * Deletes the deck with the specified `deckId`.\n * @param deckId\n *  the id of the deck to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to an empty object.\n */\nexport async function deleteDeck(deckId, signal) {\n  const url = `${API_BASE_URL}/decks/${deckId}`;\n  const options = { method: \"DELETE\", signal };\n  return await fetchJson(url, options);\n}\n\n/**\n * Retrieves all cards associated with the specified `deckId`.\n * @param deckId\n *  the id of the target deck\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to a possible empty array of cards.\n */\nexport async function listCards(deckId, signal) {\n  const url = `${API_BASE_URL}/cards?deckId=${deckId}`;\n  return await fetchJson(url, { signal });\n}\n\n/**\n * Creates a new card associated with the specified `deckId`.\n * There is no validation that there is an existing deck with the specified `deckId`.\n * @param deckId\n *  the id of the target deck\n * @param card\n *  the card to create, which must not have an `id` property\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the new card, which will have an `id` property.\n */\nexport async function createCard(deckId, card, signal) {\n  // There is a bug in json-server, if you post to /decks/:deckId/cards the associated deckId is a string\n  // and the card is not related to the deck because the data types of the ID's are different.\n  const url = `${API_BASE_URL}/cards`;\n  card.deckId = Number(deckId);\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(card),\n    signal,\n  };\n  return await fetchJson(url, options);\n}\n\n/**\n * Retrieves the card with the specified `cardId`\n * @param cardId\n *  the id of the target\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the saved card.\n */\nexport async function readCard(cardId, signal) {\n  const url = `${API_BASE_URL}/cards/${cardId}`;\n  return await fetchJson(url, { signal });\n}\n\n/**\n * Updates an existing deck\n * @param updatedCard\n *  the card to save, which must have an `id` property.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the updated card.\n */\nexport async function updateCard(updatedCard, signal) {\n  const url = `${API_BASE_URL}/cards/${updatedCard.id}`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify(updatedCard),\n  };\n  return await fetchJson(url, options);\n}\n\n/**\n * Deletes the card with the specified `cardId`.\n * @param cardId\n *  the id of the card to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to an empty object.\n */\nexport async function deleteCard(cardId, signal) {\n  const url = `${API_BASE_URL}/cards/${cardId}`;\n  const options = { method: \"DELETE\", signal };\n  return await fetchJson(url, options);\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nfunction NotEnoughCards({ deck, deckId, cards }) {\n  return (\n    <div className=\"container\">\n      <nav className=\"breadcrumb\">\n        <ol className=\"breadcrumb\">\n          <li className=\"breadcrumb-item\" key=\"0\">\n            <Link to=\"/\">Home</Link>\n          </li>\n          <li className=\"breadcrumb-item\" key=\"1\">\n            <Link to={`/decks/${deckId}`}>{deck.name}</Link>\n          </li>\n          <li className=\"breadcrumb-item-active\" key=\"2\">Study</li>\n        </ol>\n      </nav>\n      <div>\n        <h3> Study: {deck.name}</h3>\n        <p>\n          Not Enough Cards! You need at least 3 cards to study. There are{\" \"}\n          {cards.length} in this deck\n        </p>\n      </div>\n      <button>\n        <Link to={`/decks/${deck.id}/cards/new`}>Add Cards</Link>\n      </button>\n    </div>\n  );\n}\n\nexport default NotEnoughCards;\n","import React, { useState, useEffect } from \"react\";\nimport { useHistory, Link } from \"react-router-dom\";\nimport { readDeck } from \"../utils/api/index\";\nimport NotEnoughCards from \"../Cards/NotEnoughCards\";\n\nfunction StudyDeck({ deckId }) {\n  const [cards, setCards] = useState();\n  const [deck, setDeck] = useState();\n  const [front, setFront] = useState(true);\n  const [cardIndex, setCardIndex] = useState(0);\n  const history = useHistory();\n\n  // fetch deck and cards\n  useEffect(() => {\n    async function getCardsAndDeck() {\n      const response = await readDeck(deckId);\n      setDeck(response);\n      setCards(response.cards);\n    }\n    getCardsAndDeck();\n  }, [deckId]);\n\n  // flip hander\n  const flipHandler = (e) => {\n    setFront(!front);\n  };\n\n  // next handler\n  const nextHandler = (e) => {\n    if (cardIndex + 1 < cards.length) {\n      setCardIndex(cardIndex + 1);\n      setFront(true);\n      \n    } else {\n      const result = window.confirm(\n        \"Do you want to restart? To return to homepage click cancel\"\n      );\n      if (result) {\n        setFront(true);\n        setCardIndex(0);\n      } else {\n        history.push(\"/\");\n      }\n    }\n  };\n\n  \n  if (!cards) {\n    return <p>Loading...</p>;\n  }\n  if (cards.length < 3) {\n    return <NotEnoughCards deck={deck} deckId={deckId} cards={cards} />;\n  }\n\n  return (\n    <div className=\"container\">\n      <nav aria-label=\"breadcrumb\">\n        <ol className=\"breadcrumb\">\n          <li className=\"breadcrumb-item\">\n            <Link className=\"b-crumb\" to=\"/\">Home</Link>\n          </li>\n          <li className=\"breadcrumb-item\">\n            <Link className=\"b-crumb\"to={`/decks/${deckId}`}>{deck.name}</Link>\n          </li>\n          <li className=\"breadcrumb-item active\">Study</li>\n        </ol>\n      </nav>\n      {/* <h3> Study: {deck.name}</h3> */}\n      <div className=\"container\">\n        <h3 className=\"study-deck-header\">\n          Card {cardIndex + 1} of {cards.length}\n        </h3>\n      </div>\n      <div>\n        <p className=\"study-deck-front-back\">{front ? cards[cardIndex].front : cards[cardIndex].back}</p>\n      </div>\n      <button className=\"m-2 edit-card-submit buttons-all\" type=\"flip\" onClick={flipHandler}>\n        Flip\n      </button>\n      <button className=\"m-2 edit-card-submit buttons-all\" onClick={nextHandler}>Next</button>\n      \n    </div>\n  );\n}\n\nexport default StudyDeck;\n","import React, { useState, useEffect } from \"react\";\nimport { readDeck, updateDeck } from \"../utils/api/index\";\nimport { Link, useHistory } from \"react-router-dom\";\n\nconst EditDeck = ({ deck, deckId }) => {\n  // assign variables\n  const history = useHistory();\n  //const {deckId} = useParams();\n\n  const initialDeckState = {\n    id: \" \",\n    name: \" \",\n    description: \" \",\n  };\n  const [editDeck, setEditDeck] = useState(initialDeckState);\n\n  // retrieve deck\n  useEffect(() => {\n    async function getDeck() {\n      const gettingDeck = await readDeck(deckId);\n      setEditDeck(gettingDeck);\n    }\n    getDeck();\n  }, [deckId]);\n\n  // change handler\n  const changeHandler = (e) => {\n    e.preventDefault();\n    setEditDeck({ ...editDeck, [e.target.name]: e.target.value });\n  };\n\n  // submit handler\n  async function submitHandler(e) {\n    e.preventDefault();\n    await updateDeck(editDeck);\n    history.push(\"/\");\n  }\n\n  // cancel handler\n  const cancelHandler = (e) => {\n    history.push(\"/\");\n  };\n  \n  if (!deck) {\n    return <p>Loading</p>;\n  }\n  return (\n    <div className=\"container\">\n      <ol className=\"breadcrumb\">\n        <li className=\"breadcrumb-item\">\n          <Link className=\"b-crumb\" to=\"/\">Home</Link>\n        </li>\n        <li className=\"breadcrumb-item\">\n          <Link className=\"b-crumb\" to={`/decks/${deckId}`}>{editDeck.name}</Link>\n        </li>\n        <li className=\"breadcrumb-item active\">Edit Deck</li>\n      </ol>\n      <div>\n        <div className=\"col\">\n      <form>\n        <label className=\"edit-card-front-back-title\">Deck Name</label>\n        <input\n          type=\"textarea\"\n          id=\"name\"\n          name=\"name\"\n          onChange={changeHandler}\n          value={editDeck.name}\n          className=\"row edit-card-textbox\"\n        ></input>\n\n        <label className=\"edit-card-front-back-title\">Description</label>\n        <textarea\n          rows=\"3\"\n          id=\"description\"\n          name=\"description\"\n          onChange={changeHandler}\n          value={editDeck.description}\n          className=\"row edit-card-textbox\"\n        ></textarea>\n         </form>\n        </div>\n        \n        <button\n          className=\"m-2 edit-card-cancel buttons-all\"\n          type=\"submit\"\n          onClick={submitHandler}\n        >\n          Submit\n        </button>\n        <button\n          className=\"m-2 edit-card-submit buttons-all\"\n          type=\"cancel\"\n          onClick={cancelHandler}\n        >\n          Cancel\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default EditDeck;\n","\n\nimport React from \"react\";\nimport {Link, useHistory} from \"react-router-dom\";\nimport {deleteCard} from \"../utils/api\";\n\n\nfunction CardList ({deck, cards}) {\n// set variables\nconst history = useHistory();\n\n// delete card handler\nfunction deleteCardHandler (cardId) {\n    if(window.confirm(\"Are you super duper sure you want to delete? Once deleted, no take backs\")) {\n      deleteCard(cardId).then(() => history.push(\"/\"));     \n    }\n  }\n\n\n// map cards into format\nconst cardLayout = cards.map((card) => {\n    return (\n        <div className=\"card\" key={card.id}>\n            <div className=\"container\" >\n                <div className=\"row\">\n                <div className=\"col front-back-card\">\n                <p>Front:</p>\n                <div>\n                    <p>{card.front}</p>\n                </div>\n                </div>\n                <div className=\"col front-back-card\">\n                <p>Back:</p>\n                <div>\n                    <p>{card.back}</p>\n                </div>\n                </div>\n                </div>\n                </div>\n                <Link to={`/decks/${deck.id}/cards/${card.id}/edit`} className=\"edit-card-on-card\">\n                    Edit Card\n                </Link>\n                \n                 \n                   \n\n            \n            <button className=\"view-deck-delete-card\" type=\"delete\" onClick={ () => deleteCardHandler(card.id)}>Delete Card</button>\n        </div>\n    )\n})\n\n   \n\n\n    return (\n<div>\n    {cardLayout}\n</div>\n    )\n}\n\n\nexport default CardList;","import React from \"react\";\nimport CardList from \"../Cards/CardList\";\nimport {Link} from \"react-router-dom\";\n\n// does not rerender appropriate number of cards\nconst ViewDeck = ({ deck, decks, setDecks, cards, deleteDeckHandler}) => {\n\n\n\n    if (!deck) return null;\n    return (\n      <div className=\"container\" style={{marginTop:\"40px\"}}>\n        <div>\n          <ol className=\"breadcrumb\">\n            <li className=\"breadcrumb-item\" key=\"0\">\n              <Link to=\"/\" className=\"breadcrumb-home\">Home</Link>\n            </li>\n            <li className=\"breadcrumb-item active\" key=\"1\">{deck.name}</li>\n          </ol>\n        </div>\n        <div className=\"deck-info\">\n          <h2 className=\"deck-name\">{deck.name}</h2>\n          <h4 className=\"deck-description\">{deck.description}</h4>\n          <Link className=\"m-2 deck-buttons\" to={`/decks/${deck.id}/edit`}>Edit</Link>\n          <Link className=\"m-2 deck-buttons\" to={`/decks/${deck.id}/study`}>Study</Link>\n          <Link className=\"m-2 deck-buttons\" to={`/decks/${deck.id}/cards/new`}>Add Cards</Link>\n          <button className=\"m-2 create-deck\" onClick={() => deleteDeckHandler(deck.id)}>Delete Deck</button>\n        </div>\n        <br />\n        <div>\n          <h4 className=\"deck-description\"> {deck.cards.length} Cards</h4>\n          <CardList\n            deck={deck}\n            decks={decks}\n            setDecks={setDecks}\n            deckId={deck.id}\n            cards={deck.cards}\n          />\n        </div>\n      </div>\n    );\n  };\n\n\n  export default ViewDeck;","import React, { useState } from \"react\";\nimport { createCard } from \"../utils/api/index\";\nimport { useHistory, Link } from \"react-router-dom\";\n\nconst AddCard = ({ deck, setDeck, deckId }) => {\n  //assign variables\n  const history = useHistory();\n  const [newCard, setNewCard] = useState({\n    front: \" \",\n    back: \" \",\n    deckId,\n  });\n\n  const cardFrontChangeHandler = (e) => {\n    e.preventDefault();\n    setNewCard({ ...newCard, front: e.target.value });\n  };\n\n  const cardBackChangeHandler = (e) => {\n    e.preventDefault();\n    setNewCard({ ...newCard, back: e.target.value });\n  };\n\n  async function cardSubmitHandler(e) {\n    e.preventDefault();\n    await createCard(deckId, newCard);\n    history.push(\"/\");\n    setDeck(deck);\n  }\n\n  // const cardCancelHandler = () => {\n  //   history.push(\"/decks/:deckId\");\n  // };\n\n  const cardCancelHandler = () => {\n    history.push(`/decks/${deckId}`);\n  };\n\n  if (!deck) {\n    return <p>Loading...</p>;\n  }\n  return (\n    <div className=\"container\">\n      <nav aria-label=\"breadcrumb\">\n        <ol className=\"breadcrumb\">\n          <li className=\"breadcrumb-item\">\n            <Link className=\"b-crumb\" to=\"/\">Home</Link>\n          </li>\n          <li className=\"breadcrumb-item\">\n            <Link className=\"b-crumb\" to={`/decks/${deckId}`}>{deck.name}</Link>\n          </li>\n          <li className=\"breadcrumb-item active\">Add Card</li>\n        </ol>\n      </nav>\n\n     \n      <div>\n        <div className=\"col\">\n      <form >\n        <label className=\"edit-card-front-back-title\">Front</label>\n        <textarea\n          type=\"text\"\n          id=\"front\"\n          name=\"front\"\n          onChange={cardFrontChangeHandler}\n          value={newCard.front}\n          className=\"row edit-card-textbox\"\n        ></textarea>\n        <label className=\"edit-card-front-back-title\">Back</label>\n        <textarea\n          type=\"text\"\n          id=\"back\"\n          name=\"back\"\n          onChange={cardBackChangeHandler}\n          value={newCard.back}\n          className=\"row edit-card-textbox\"\n        ></textarea>\n        </form>\n        </div>\n        <button className=\"m-2 edit-card-submit buttons-all\" type=\"submit\" onClick={cardSubmitHandler}>\n          Submit\n        </button>\n        <button className=\"m-2 edit-card-cancel buttons-all\" type=\"canel\" onClick={cardCancelHandler}>\n          Cancel\n        </button>\n        </div>\n    </div>\n  );\n};\n\nexport default AddCard;\n","import React, { useEffect, useState } from \"react\";\nimport { useParams, useHistory, Link } from \"react-router-dom\";\nimport { readCard, updateCard } from \"../utils/api/index\";\n\nconst EditCard = ({ deck, deckId }) => {\n  // assign variables\n  const initialCardState = {\n    front: \" \",\n    back: \" \",\n  };\n  const [editCard, setEditCard] = useState(initialCardState);\n  const { cardId } = useParams();\n  const history = useHistory();\n\n  // fetch card\n  useEffect(() => {\n    async function getCard() {\n      const response = await readCard(cardId);\n      setEditCard(response);\n    }\n    getCard();\n  }, [cardId]);\n\n  // card change handler\n  const cardFrontChangeHandler = (e) => {\n    e.preventDefault();\n    setEditCard({ ...editCard, front: e.target.value });\n  };\n  const cardBackChangeHandler = (e) => {\n    e.preventDefault();\n    setEditCard({ ...editCard, back: e.target.value });\n  };\n\n  // cancel handler\n  function cancelHandler(e) {\n    e.preventDefault();\n    history.push(\"/\");\n  }\n\n  // submit handler\n  async function cardSubmitHandler(e) {\n    e.preventDefault();\n    await updateCard(editCard);\n    history.go(\"/\");\n  }\n\n  if (!deck) {\n    return <p>Loading...</p>;\n  }\n  return (\n    <div className=\"container\">\n      <nav aria-label=\"breadcrumb\">\n        <ol className=\"breadcrumb\">\n          <li className=\"breadcrumb-item\">\n            <Link className=\"b-crumb\" to=\"/\">Home</Link>\n          </li>\n          <li className=\"breadcrumb-item\">\n            <Link className=\"b-crumb\" to={`/decks/${deckId}`}>{deck.name}</Link>\n          </li>\n          <li className=\"breadcrumb-item active\">Edit Card</li>\n        </ol>\n      </nav>\n      <div>\n      <div className=\"col\">\n      <form>\n        <label className=\"edit-card-front-back-title\">Front</label>\n        <textarea\n          rows=\"3\"\n          id=\"front\"\n          name=\"front\"\n          onChange={cardFrontChangeHandler}\n          value={editCard.front}\n          className=\"row edit-card-textbox\"\n\n        ></textarea>\n\n        <label className=\"edit-card-front-back-title\">Back</label>\n        <textarea\n          rows=\"3\"\n          id=\"back\"\n          name=\"back\"\n          onChange={cardBackChangeHandler}\n          value={editCard.back}\n          className=\"row edit-card-textbox\"\n        ></textarea>\n        </form>\n        \n        </div>\n        <button className=\"m-2 edit-card-submit buttons-all\" type=\"submit\" onClick={cardSubmitHandler}>\n          Submit\n        </button>\n        <button className=\"m-2 edit-card-cancel buttons-all\" type=\"cancel\" onClick={cancelHandler}>\n          Cancel\n        </button>\n        </div>\n        \n      \n    </div>\n  );\n};\n\nexport default EditCard;\n","import React, { useState, useEffect } from \"react\";\nimport { Switch, Route, useParams } from \"react-router-dom\";\nimport StudyDeck from \"./StudyDeck\";\nimport EditDeck from \"./EditDeck\";\nimport { listCards, readDeck } from \"../utils/api/index\";\nimport ViewDeck from \"./ViewDeck\";\nimport AddCard from \"../Cards/AddCard\";\nimport EditCard from \"../Cards/EditCard\";\n\n\nconst DeckHome = ({ decks, setDecks, deleteDeckHandler }) => {\n  const { deckId } = useParams();\n  const [cards, setCards] = useState([]);\n  const [deck, setDeck] = useState();\n\n  // fetch specific deck\n  useEffect(() => {\n    \n    async function getDeck() {  \n      const gettingDeck = await readDeck(deckId);\n      setDeck(gettingDeck);\n    }\n    getDeck();   \n  }, [deckId]);\n  \n\n  // fetch cards per deck\n  useEffect(() => {\n    async function getCards() {\n      const gettingDeck = await listCards(deckId);\n      setCards(gettingDeck);\n    }\n    getCards();\n  }, [deckId]);\n\n  return (\n    <div>\n      <Switch>\n        <Route exact path=\"/decks/:deckId\">\n          <ViewDeck {...{ deck, decks, setDecks, cards, deleteDeckHandler }} />\n        </Route>\n        <Route path=\"/decks/:deckId/study\">\n          <StudyDeck\n            deckId={deckId}\n            deck={deck}\n            deleteDeckHandler={deleteDeckHandler}\n            cards={cards}\n            setCards={setCards}\n          />\n        </Route>\n        <Route path=\"/decks/:deckId/edit\">\n          <EditDeck\n            deckId={deckId}\n            deck={deck}\n            setDecks={setDecks}\n            decks={decks}\n          />\n        </Route>\n        <Route path=\"/decks/:deckId/cards/:cardId/edit\">\n          <EditCard {...{ deck, cards, setCards, deckId }} />\n        </Route>\n        <Route path=\"/decks/:deckId/cards/new\">\n          <AddCard {...{ deck, cards, setCards, deckId, setDeck }} />\n        </Route>\n        <Route>\n          <p>Deck not found</p>\n        </Route>\n      </Switch>\n    </div>\n  );\n};\n\nexport default DeckHome;\n","import React, { useState } from \"react\";\nimport { createDeck } from \"../utils/api/index\";\nimport { useHistory, Link } from \"react-router-dom\";\n\nconst CreateDeck = () => {\n  const [newDeck, setNewDeck] = useState({\n    name: \"\",\n    description: \"\",\n  });\n  const history = useHistory();\n\n  const changeHandler = (e) => {\n    e.preventDefault();\n    setNewDeck({ ...newDeck, [e.target.name]: e.target.value });\n  };\n\n  async function submitHandler(e) {\n    const response = await createDeck(newDeck);\n    history.push(\"/\");\n    return response;\n  }\n\n  const cancelHandler = (e) => {\n    history.push(\"/\");\n  };\n\n  return (\n    <div className=\"container\">\n      <ol className=\"breadcrumb\">\n        <li className=\"breadcrumb-item\">\n          <Link className=\"b-crumb\" to=\"/\">Home</Link>\n        </li>\n        <li className=\"breadcrumb-item active\">Create Deck</li>\n      </ol>\n      <div>\n        <div className=\"col\">\n      <form onSubmit={submitHandler}>\n        <label className=\"edit-card-front-back-title\">Deck Name</label>\n        <input\n          type=\"text\"\n          id=\"name\"\n          name=\"name\"\n          onChange={changeHandler}\n          value={newDeck.name}\n          className=\"row edit-card-textbox\"\n        ></input>\n\n        <label className=\"edit-card-front-back-title\">Description</label>\n        <textarea\n          id=\"description\"\n          name=\"description\"\n          onChange={changeHandler}\n          value={newDeck.description}\n          className=\"row edit-card-textbox\"\n        ></textarea>\n</form>\n</div>\n        \n        <button className=\"edit-card-submit buttons-all\" type=\"submit\" onSubmit={submitHandler}>\n          Submit\n        </button>\n        <button className=\"edit-card-cancel buttons-all\" type=\"cancel\" onClick={cancelHandler}>\n          Cancel\n        </button>\n      \n      </div>\n    </div>\n  );\n};\n\nexport default CreateDeck;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nfunction ViewDecks({ decks, deleteDeckHandler }) {\n\n\n  // map decks into format\n  const deckLayout = decks.map((deck) => {\n    return (\n      <div className=\"decks-card col\" key={deck.id}>\n        <div>\n          <h3>{deck.name}</h3>\n\n          <div>\n            <p>{deck.description}</p>\n          </div>\n          <div>{deck.cards.length} cards</div>\n          <Link className=\"m-2 deck-buttons\" to={`/decks/${deck.id}/`}>\n            View\n          </Link>\n          <Link className=\"m-2 deck-buttons\" to={`/decks/${deck.id}/study`}>\n            Study\n          </Link>\n          <button\n            className=\"m-2 create-deck\"\n            // type=button\n            onClick={() => deleteDeckHandler(deck.id)}\n          >\n            Delete\n          </button>\n        </div>\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"container\">\n      <h3 className=\"current-decks-header\">Current Decks...</h3>\n      <div className=\"all-decks row\">{deckLayout}</div>\n      <Link className=\"create-deck\" to={'/decks/new'}>Create Deck</Link>\n      {/* <button onclick={()}>Create Deck</button> */}\n    </div>\n  );\n}\n\nexport default ViewDecks;\n","import React, { useState, useEffect } from \"react\";\nimport { Route, Switch, useHistory } from \"react-router-dom\";\nimport Header from \"./Header\";\nimport NotFound from \"./NotFound\";\nimport DeckHome from \"../Decks/DeckHome\";\nimport { deleteDeck, listDecks } from \"../utils/api/index\";\nimport CreateDeck from \"../Home/CreateDeck\";\nimport ViewDecks from \"../Home/ViewDecks\";\n\nimport \"./styles.css\"\n\nfunction Layout() {\n  //assign variables\n  const [decks, setDecks] = useState([]);\n  const history = useHistory();\n\n  // retrieve decks\n  useEffect(() => {\n    async function getDecks() {\n      const gettingDecks = await listDecks();\n      console.log(\"gettingDecks\", gettingDecks)\n      setDecks(gettingDecks);\n    }\n    getDecks();\n  }, [setDecks]);\nconsole.log(\"decks\", decks)\n\n  // delete deck\n  function deleteDeckHandler(deckId) {\n    if (\n      window.confirm(\n        \"Are you super duper sure you want to delete? Once deleted, no take backs\"\n      )\n    ) {\n      deleteDeck(deckId);\n      history.push(\"/\");\n    }\n  }\n  return (\n    <div className=\"background-color\">\n      <Header />\n      <div className=\"container\">\n        <Switch>\n          <Route exact path=\"/\">\n            <ViewDecks\n              decks={decks}\n              setDecks={setDecks}\n              deleteDeckHandler={deleteDeckHandler}\n            />\n          </Route>\n          <Route path=\"/decks/new\">\n            <CreateDeck />\n          </Route>\n          <Route path=\"/decks/:deckId\">\n            <DeckHome\n              decks={decks}\n              setDecks={setDecks}\n              deleteDeckHandler={deleteDeckHandler}\n            />\n          </Route>\n          <Route>\n            <NotFound />\n          </Route>\n        </Switch>\n      </div>\n    </div>\n  );\n}\n\nexport default Layout;\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Layout from \"./Layout\";\n\n/**\n * App is a wrapper for <Layout>, you should not need to change this file.\n */\n\nfunction App() {\n  return (\n    <div className=\"app-routes\">\n      <Switch>\n        <Route path=\"/\">\n          <Layout />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}